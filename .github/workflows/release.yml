name: Release

on:
  push:
    tags:
      - 'v*'
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: zip
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: tar.gz
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          BIN_NAME="calc-rs"
          VERSION="${GITHUB_REF#refs/tags/}"
          ARCHIVE_NAME="${BIN_NAME}-${VERSION}-${{ matrix.target }}"
          
          mkdir -p "${ARCHIVE_NAME}"
          cp "target/${{ matrix.target }}/release/${BIN_NAME}" "${ARCHIVE_NAME}/"
          cp README.md LICENSE "${ARCHIVE_NAME}/" 2>/dev/null || true
          
          tar -czf "${ARCHIVE_NAME}.tar.gz" "${ARCHIVE_NAME}"
          echo "ASSET=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
      
      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $BIN_NAME = "calc-rs"
          $VERSION = $env:GITHUB_REF -replace 'refs/tags/', ''
          $ARCHIVE_NAME = "$BIN_NAME-$VERSION-${{ matrix.target }}"
          
          New-Item -ItemType Directory -Path $ARCHIVE_NAME -Force
          Copy-Item "target/${{ matrix.target }}/release/$BIN_NAME.exe" "$ARCHIVE_NAME/"
          Copy-Item "README.md" "$ARCHIVE_NAME/" -ErrorAction SilentlyContinue
          Copy-Item "LICENSE" "$ARCHIVE_NAME/" -ErrorAction SilentlyContinue
          
          Compress-Archive -Path $ARCHIVE_NAME -DestinationPath "$ARCHIVE_NAME.zip"
          echo "ASSET=$ARCHIVE_NAME.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ env.ASSET }}

  # Create Homebrew formula for macOS
  create-homebrew-formula:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create Homebrew Formula
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          cat > calc-rs.rb << EOF
          class CalcRs < Formula
            desc "Expression calculator with tree visualization"
            homepage "https://github.com/${{ github.repository }}"
            url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/calc-rs-v${VERSION}-x86_64-apple-darwin.tar.gz"
            version "${VERSION}"
            
            def install
              bin.install "calc-rs"
            end
            
            test do
              system "#{bin}/calc-rs", "--version"
            end
          end
          EOF
      
      - name: Upload Homebrew formula
        uses: actions/upload-artifact@v4
        with:
          name: homebrew-formula
          path: calc-rs.rb

  # Create install scripts
  create-install-scripts:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Linux install script
        run: |
          cat > install.sh << 'EOF'
          #!/bin/bash
          set -e
          
          REPO="${{ github.repository }}"
          VERSION="${GITHUB_REF#refs/tags/}"
          BINARY="calc-rs"
          
          # Detect OS and architecture
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          
          if [ "$OS" = "linux" ]; then
            TARGET="x86_64-unknown-linux-gnu"
          elif [ "$OS" = "darwin" ]; then
            TARGET="x86_64-apple-darwin"
          else
            echo "Unsupported OS: $OS"
            exit 1
          fi
          
          # Download and install
          URL="https://github.com/${REPO}/releases/latest/download/${BINARY}-${VERSION}-${TARGET}.tar.gz"
          
          echo "Downloading ${BINARY}..."
          curl -L "$URL" | tar xz
          
          echo "Installing to /usr/local/bin..."
          sudo mv "${BINARY}-${VERSION}-${TARGET}/${BINARY}" /usr/local/bin/
          
          echo "âœ“ ${BINARY} installed successfully!"
          echo "Run '${BINARY}' to start."
          EOF
          chmod +x install.sh
      
      - name: Create Windows install script
        run: |
          cat > install.ps1 << 'EOF'
          $ErrorActionPreference = "Stop"
          
          $REPO = "${{ github.repository }}"
          $VERSION = $env:GITHUB_REF -replace 'refs/tags/', ''
          $BINARY = "calc-rs"
          $TARGET = "x86_64-pc-windows-msvc"
          
          $URL = "https://github.com/$REPO/releases/latest/download/$BINARY-$VERSION-$TARGET.zip"
          $INSTALL_DIR = "$env:LOCALAPPDATA\Programs\$BINARY"
          
          Write-Host "Downloading $BINARY..."
          Invoke-WebRequest -Uri $URL -OutFile "$env:TEMP\$BINARY.zip"
          
          Write-Host "Installing..."
          Expand-Archive -Path "$env:TEMP\$BINARY.zip" -DestinationPath $env:TEMP -Force
          New-Item -ItemType Directory -Path $INSTALL_DIR -Force | Out-Null
          Copy-Item "$env:TEMP\$BINARY-$VERSION-$TARGET\$BINARY.exe" $INSTALL_DIR -Force
          
          # Add to PATH
          $PATH = [Environment]::GetEnvironmentVariable("Path", "User")
          if ($PATH -notlike "*$INSTALL_DIR*") {
            [Environment]::SetEnvironmentVariable("Path", "$PATH;$INSTALL_DIR", "User")
            Write-Host "Added to PATH"
          }
          
          Write-Host "âœ“ $BINARY installed successfully!"
          Write-Host "Restart your terminal and run '$BINARY' to start."
          EOF
      
      - name: Upload install scripts
        uses: actions/upload-artifact@v4
        with:
          name: install-scripts
          path: |
            install.sh
            install.ps1

  release:
    needs: [build, create-homebrew-formula, create-install-scripts]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f -exec cp {} release-assets/ \;
          ls -lah release-assets/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          body: |
            ## ðŸš€ Installation
            
            ### Linux/macOS (Quick Install)
            ```bash
            curl -sSL https://github.com/${{ github.repository }}/releases/latest/download/install.sh | bash
            ```
            
            ### Windows (Quick Install)
            ```powershell
            irm https://github.com/${{ github.repository }}/releases/latest/download/install.ps1 | iex
            ```
            
            ### macOS (Homebrew)
            ```bash
            brew tap ${{ github.repository_owner }}/tap
            brew install calc-rs
            ```
            
            ### Manual Installation
            Download the appropriate archive for your platform below and extract it.
            
            ---
            
            ## ðŸ“¦ Downloads
            - **Linux**: `calc-rs-*-x86_64-unknown-linux-gnu.tar.gz`
            - **Windows**: `calc-rs-*-x86_64-pc-windows-msvc.zip`
            - **macOS**: `calc-rs-*-x86_64-apple-darwin.tar.gz`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}