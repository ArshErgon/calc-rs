name: Release

on:
  push:
    tags:
      - 'v*'
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: zip
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: tar.gz
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Create archive (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          BIN_NAME="shuntcalc"
          VERSION="${GITHUB_REF#refs/tags/}"
          ARCHIVE_NAME="${BIN_NAME}-latest-${{ matrix.target }}"
          
          mkdir -p "${ARCHIVE_NAME}"
          cp "target/${{ matrix.target }}/release/${BIN_NAME}" "${ARCHIVE_NAME}/"
          
          # Copy optional files if they exist
          [ -f README.md ] && cp README.md "${ARCHIVE_NAME}/" || true
          [ -f LICENSE ] && cp LICENSE "${ARCHIVE_NAME}/" || true
          
          tar -czf "${ARCHIVE_NAME}.tar.gz" "${ARCHIVE_NAME}"
          echo "ASSET=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
          echo "Created archive: ${ARCHIVE_NAME}.tar.gz"
      
      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $BIN_NAME = "shuntcalc"
          $VERSION = $env:GITHUB_REF -replace 'refs/tags/', ''
          $ARCHIVE_NAME = "$BIN_NAME-latest-${{ matrix.target }}"
          
          New-Item -ItemType Directory -Path $ARCHIVE_NAME -Force | Out-Null
          Copy-Item "target/${{ matrix.target }}/release/$BIN_NAME.exe" "$ARCHIVE_NAME/"
          
          # Copy optional files if they exist
          if (Test-Path "README.md") { Copy-Item "README.md" "$ARCHIVE_NAME/" }
          if (Test-Path "LICENSE") { Copy-Item "LICENSE" "$ARCHIVE_NAME/" }
          
          Compress-Archive -Path $ARCHIVE_NAME -DestinationPath "$ARCHIVE_NAME.zip" -Force
          echo "ASSET=$ARCHIVE_NAME.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "Created archive: $ARCHIVE_NAME.zip"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ env.ASSET }}

  # Create Homebrew formula for macOS
  create-homebrew-formula:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create Homebrew Formula
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          cat > shuntcalc.rb << EOF
          class CalcRs < Formula
            desc "Expression calculator with tree visualization"
            homepage "https://github.com/${{ github.repository }}"
            url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/shuntcalc-v${VERSION}-x86_64-apple-darwin.tar.gz"
            version "${VERSION}"
            
            def install
              bin.install "shuntcalc"
            end
            
            test do
              system "#{bin}/shuntcalc", "--version"
            end
          end
          EOF
      
      - name: Upload Homebrew formula
        uses: actions/upload-artifact@v4
        with:
          name: homebrew-formula
          path: shuntcalc.rb

  # Create install scripts
  create-install-scripts:
    needs: build
    runs-on: ubuntu-latest
    steps:  
      - name: Create Linux install script
        env:
          REPO: ${{ github.repository }}
        run: |
          cat > install.sh << EOF
          #!/bin/bash
          set -e
          
          REPO="${REPO}"
          BINARY="shuntcalc"
          
          # Detect OS and architecture
          OS=\$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=\$(uname -m)
          
          if [ "\$OS" = "linux" ]; then
            TARGET="x86_64-unknown-linux-gnu"
          elif [ "\$OS" = "darwin" ]; then
            TARGET="x86_64-apple-darwin"
          else
            echo "Unsupported OS: \$OS"
            exit 1
          fi
          
          # Download and install
          echo "Downloading \${BINARY}..."
          TEMP_DIR=\$(mktemp -d)
          cd "\$TEMP_DIR"
          
          curl -sL "https://github.com/\${REPO}/releases/latest/download/\${BINARY}-latest-\${TARGET}.tar.gz" | tar xz
          
          echo "Installing to /usr/local/bin..."
          sudo install -m 755 */\${BINARY} /usr/local/bin/
          
          cd -
          rm -rf "\$TEMP_DIR"
          
          echo "âœ“ \${BINARY} installed successfully!"
          echo "Run '\${BINARY}' to start."
          EOF
          chmod +x install.sh
      
      - name: Create Windows install script
        env:
          REPO: ${{ github.repository }}
        shell: pwsh
        run: |
          @'
          `$ErrorActionPreference = "Stop"
          
          `$REPO = "$env:REPO"
          `$BINARY = "shuntcalc"
          `$TARGET = "x86_64-pc-windows-msvc"
          
          `$URL = "https://github.com/`$REPO/releases/latest/download/`$BINARY-latest-`$TARGET.zip"
          `$INSTALL_DIR = "`$env:LOCALAPPDATA\Programs\`$BINARY"
          
          Write-Host "Downloading `$BINARY..."
          `$TempZip = "`$env:TEMP\`$BINARY.zip"
          Invoke-WebRequest -Uri `$URL -OutFile `$TempZip
          
          Write-Host "Installing..."
          `$TempExtract = "`$env:TEMP\`$BINARY-extract"
          Expand-Archive -Path `$TempZip -DestinationPath `$TempExtract -Force
          New-Item -ItemType Directory -Path `$INSTALL_DIR -Force | Out-Null
          Get-ChildItem -Path `$TempExtract -Recurse -Filter "`$BINARY.exe" | Copy-Item -Destination `$INSTALL_DIR -Force
          
          # Add to PATH
          `$PATH = [Environment]::GetEnvironmentVariable("Path", "User")
          if (`$PATH -notlike "*`$INSTALL_DIR*") {
            [Environment]::SetEnvironmentVariable("Path", "`$PATH;`$INSTALL_DIR", "User")
            Write-Host "Added to PATH"
          }
          
          # Cleanup
          Remove-Item `$TempZip, `$TempExtract -Recurse -Force -ErrorAction SilentlyContinue
          
          Write-Host "âœ“ `$BINARY installed successfully!"
          Write-Host "Restart your terminal and run '`$BINARY' to start."
          '@ | Out-File -FilePath install.ps1 -Encoding utf8
      
      - name: Upload install scripts
        uses: actions/upload-artifact@v4
        with:
          name: install-scripts
          path: |
            install.sh
            install.ps1

  release:
    needs: [build, create-homebrew-formula, create-install-scripts]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f -exec cp {} release-assets/ \;
          ls -lah release-assets/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          body: |
            ## ðŸš€ Installation
            
            ### Linux/macOS (Quick Install)
            ```bash
            curl -sSL https://github.com/${{ github.repository }}/releases/latest/download/install.sh | bash
            ```
            
            ### Windows (Quick Install)
            ```powershell
            irm https://github.com/${{ github.repository }}/releases/latest/download/install.ps1 | iex
            ```
            
            ### macOS (Homebrew)
            ```bash
            brew tap ${{ github.repository_owner }}/tap
            brew install shuntcalc
            ```
            
            ### Manual Installation
            Download the appropriate archive for your platform below and extract it.
            
            ---
            
            ## ðŸ“¦ Downloads
            - **Linux**: `shuntcalc-*-x86_64-unknown-linux-gnu.tar.gz`
            - **Windows**: `shuntcalc-*-x86_64-pc-windows-msvc.zip`
            - **macOS**: `shuntcalc-*-x86_64-apple-darwin.tar.gz`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}